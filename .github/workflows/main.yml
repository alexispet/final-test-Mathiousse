name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#       - develop

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#       - name: Use Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"
#       - name: Install dependencies
#         run: npm ci
#       - name: Run eslint
#         run: npx eslint .

#   audit:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - run: npm audit --audit-level=high

#   build-test-push: # squished them all together to save some time
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Log in to the Container registry
#         uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api

#       - name: Build Docker image
#         uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#         with:
#           context: .
#           push: false
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#         id: docker_build

#       - name: Run Docker db Compose # running the db first then everything else works for some reason!!!
#         run: docker-compose up -d db
#         env:
#           MYSQL_RANDOM_ROOT_PASSWORD: "yes"
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_HOST: ${{ secrets.DB_HOST }}
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           DB_USER: ${{ secrets.DB_USER }}
#           DB_PORT: ${{ secrets.DB_PORT }}

#       - name: Wait for the db service
#         run: sudo chmod +x wait-for-it.sh && sudo ./wait-for-it.sh db:3306 --timeout=40 -- docker logs $(docker ps -lq)

#       - name: Run Docker Compose
#         run: docker-compose up -d
#         env:
#           MYSQL_RANDOM_ROOT_PASSWORD: "yes"
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_HOST: ${{ secrets.DB_HOST }}
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           DB_USER: ${{ secrets.DB_USER }}
#           DB_PORT: ${{ secrets.DB_PORT }}

#       - name: Run tests
#         run: docker exec cicd-api npm run test

#       - name: logging
#         run: docker logs cicd-api

#       - name: logging
#         run: docker logs db

#       - name: Push Docker image
#         uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#         id: docker_push

on: [push]
env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  NODE_ENV: development
  REGISTRY: ghcr.io
jobs:
  test:
    #needs: [lint]
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - run: npm run db:import
      - run: npm run test
